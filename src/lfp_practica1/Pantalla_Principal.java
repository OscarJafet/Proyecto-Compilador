/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package lfp_practica1;


import java.awt.Color;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import java.util.regex.*;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;






/**
 *
 * @author Javier
 */
public class Pantalla_Principal extends javax.swing.JFrame {

JFileChooser ArchivoLeer;
File archivo;
String linea;


ListaDoble m=new ListaDoble();
ListaDoble_2 m1=new ListaDoble_2();


 

 ListaDoble_1 textoCadena=new ListaDoble_1();

FileReader fr;
BufferedReader entrada;
File leer;




//variables para mandar
String palabra;

public int fil=0;
public int colu=0;
int No = 0;
public int salto=0;

public int fila1=0;
public int columna1=0;
public int[] Rfila;
public int [] Rcolumna;




//TextArea T_texto;

String [] PalabraReservada = {"!opensource","!closesource","$print","$read","$text",
"$Boo","$Number",};
String [] ciclos={"#loop","#for",};
    String [] Variable= {"@"};
   String [] operacionales ={"+","-","*","/","="};
    String [] agrupacion ={"(",")","{"
            , "}"};
    String [] relacionales= {"<",">","<>","=>","=<","°>"};
   String [] puntuacion={";",",","\""}; 
    String [] Decision={"¿if","¿else","¿switch","¿case"};
    
  
     
   int cont=0,cont2=0;
  
    public void PalabraReservada(String array[],String token){
        while( cont2 < array.length) {
            m.InsertarAlfinal(array[cont2], String.valueOf((token)+(cont2+1)));
            cont2++;
        }
        cont2=0;
    }
    
    

   
    public Pantalla_Principal() {
        initComponents();
        setLocationRelativeTo(null);
        //setResizable(false);
        setSize(600, 600);
        setTitle("Analizador Léxico");
     
        
        
        
        

        
        m.imprimirInicioFinal();
       
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        T_texto = new javax.swing.JTextArea();
        jbAnalizar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        fila = new javax.swing.JLabel();
        lblcadena = new javax.swing.JLabel();
        columna = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablajp = new javax.swing.JTable();
        jbBorrar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        M_Archivo = new javax.swing.JMenu();
        MI_Abrir = new javax.swing.JMenuItem();
        MI_Guardar = new javax.swing.JMenuItem();
        MI_Salir = new javax.swing.JMenuItem();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(580, 410));
        getContentPane().setLayout(null);

        T_texto.setBackground(new java.awt.Color(0, 0, 51));
        T_texto.setColumns(20);
        T_texto.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        T_texto.setForeground(new java.awt.Color(255, 255, 255));
        T_texto.setRows(5);
        T_texto.setCaretColor(new java.awt.Color(255, 255, 255));
        T_texto.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                T_textoCaretUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(T_texto);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 40, 400, 310);

        jbAnalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/1073681.png"))); // NOI18N
        jbAnalizar.setText("Analizar");
        jbAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAnalizarActionPerformed(evt);
            }
        });
        getContentPane().add(jbAnalizar);
        jbAnalizar.setBounds(420, 20, 132, 43);

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Fila");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 390, 40, 20);

        fila.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        fila.setForeground(new java.awt.Color(255, 255, 255));
        fila.setText("00");
        getContentPane().add(fila);
        fila.setBounds(40, 390, 30, 20);

        lblcadena.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        lblcadena.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(lblcadena);
        lblcadena.setBounds(80, 360, 550, 20);

        columna.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        columna.setForeground(new java.awt.Color(255, 255, 255));
        columna.setText("00");
        getContentPane().add(columna);
        columna.setBounds(150, 390, 30, 20);

        tablajp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "lexema", "Token", "Alias", "apariciones"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tablajp);

        getContentPane().add(jScrollPane4);
        jScrollPane4.setBounds(0, 430, 620, 100);

        jbBorrar.setText("Borrar");
        jbBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarActionPerformed(evt);
            }
        });
        getContentPane().add(jbBorrar);
        jbBorrar.setBounds(190, 390, 90, 23);

        jLabel5.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Cadena:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(10, 360, 70, 20);

        jLabel4.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Columna");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(70, 390, 70, 20);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fonodo.jpg"))); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, -30, 630, 490);

        jMenuBar1.setBackground(new java.awt.Color(51, 153, 255));
        jMenuBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMenuBar1.setForeground(new java.awt.Color(255, 255, 255));
        jMenuBar1.setToolTipText("");
        jMenuBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenuBar1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        M_Archivo.setBackground(new java.awt.Color(255, 255, 255));
        M_Archivo.setForeground(new java.awt.Color(255, 255, 255));
        M_Archivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/archivo.png"))); // NOI18N
        M_Archivo.setText("Archivo");
        M_Archivo.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        MI_Abrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        MI_Abrir.setBackground(new java.awt.Color(255, 255, 255));
        MI_Abrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/open.png"))); // NOI18N
        MI_Abrir.setText("Abrir");
        MI_Abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_AbrirActionPerformed(evt);
            }
        });
        M_Archivo.add(MI_Abrir);

        MI_Guardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        MI_Guardar.setBackground(new java.awt.Color(255, 255, 255));
        MI_Guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/save.png"))); // NOI18N
        MI_Guardar.setText("Guardar");
        MI_Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_GuardarActionPerformed(evt);
            }
        });
        M_Archivo.add(MI_Guardar);

        MI_Salir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        MI_Salir.setBackground(new java.awt.Color(255, 255, 255));
        MI_Salir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/5215.png"))); // NOI18N
        MI_Salir.setText("Salir");
        MI_Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_SalirActionPerformed(evt);
            }
        });
        M_Archivo.add(MI_Salir);

        jMenuBar1.add(M_Archivo);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MI_AbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_AbrirActionPerformed
     
         /**llamamos el metodo que permite cargar la ventana*/
          ArchivoLeer=new JFileChooser();
          //Hace la verificación si pertenece al rango.
          FileNameExtensionFilter filter = new FileNameExtensionFilter("Lion (.LN)", "LN");
          ArchivoLeer.setFileFilter(filter);  
          
          
          //Verifica si es o no
         int seleccion = ArchivoLeer.showOpenDialog(null);
         //si es aprovado, sigue con el paso de abrir el archivo
         if (seleccion == JFileChooser.APPROVE_OPTION) { //lanza la ventana
                      
             this.archivo = ArchivoLeer.getSelectedFile(); //seleccione el archivo de arriba
             this.leer=ArchivoLeer.getSelectedFile();
            
            
         try {
             fr = new FileReader(archivo); //abre el archivo seleccionado
             entrada = new BufferedReader(fr); // lee la linea
            
             while ((this.linea = entrada.readLine()) != null) {
                    Pantalla_Principal.T_texto.setText(T_texto.getText() + "\n" + linea);
                
                    salto++;
                
                    
             }

               
             
}catch (IOException e) {
e.printStackTrace();
}
         }
         
         
         
    }//GEN-LAST:event_MI_AbrirActionPerformed
            
    
    
    
    private void MI_SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_SalirActionPerformed
    System.exit(-1);        // TODO add your handling code here:
    }//GEN-LAST:event_MI_SalirActionPerformed

   
   
  
    private void T_textoCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_T_textoCaretUpdate
   int pos = evt.getDot(); //mira los pasos del puntero
        try {
            int fil = T_texto.getLineOfOffset(pos) + 1; //devuelve la fila
            int col = pos - T_texto.getLineStartOffset(fil - 1) + 1; //devuelve la columna
            this.columna.setText(col + "");
            this.fila.setText(fil + "");

        } catch (BadLocationException exc) {
            System.out.println(exc);
        }
    }//GEN-LAST:event_T_textoCaretUpdate

    private void jbAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAnalizarActionPerformed
PalabraReservada(PalabraReservada,"Pr");
        PalabraReservada(ciclos,"Cc");
        PalabraReservada(operacionales,"AR");
        PalabraReservada(puntuacion,"SP");
        PalabraReservada(relacionales,"Re");
        PalabraReservada(Decision,"De");
        PalabraReservada(Variable,"Va");
        PalabraReservada(agrupacion,"Ag");


    StringTokenizer token=null;
 String a=String.valueOf(this.T_texto.getText().replace("\n", "%"));
 a=String.valueOf(a.replace(" ", "%"));
 a=String.valueOf(a.replace("\t", "%"));
      lblcadena.setText(a);
        System.out.println(a);
     
        token= new StringTokenizer(a,"%");
        while(token.hasMoreTokens()){
            
            String b=token.nextToken().toString();
//            System.out.println(b);

            if(b.charAt(0)=='!'){
                 
              if(b.charAt(b.length()-1)=='e' ){
                   
                    textoCadena.InsertarAlfinal(b.substring(0,b.length()),cont);
             cont++;
              
                                   
                  
                
        }
            }else if(b.charAt(0)=='$'){
                 
               
                    if(b.charAt(b.length()-1)=='t'||b.charAt(b.length()-1)=='d'||
                            b.charAt(b.length()-1)=='o'
                            ||b.charAt(b.length()-1)=='r'){
                    textoCadena.InsertarAlfinal(b.substring(0,b.length()),cont);}
             cont++;

            }else if(b.charAt(0)=='#'){
                
                for (int i = 2; i < b.length(); i++) {
                   
                    if (b.charAt(i)=='(') 
                    {
                        textoCadena.InsertarAlfinal(b.substring(0,i),cont++);
                    break;
                    }
                    
                }

            }else if(b.charAt(0)=='¿'){
                
                for (int i = 2; i < b.length(); i++) {
                   
                    if (b.charAt(i)=='(' || b.length()==i+1) 
                    {
                        textoCadena.InsertarAlfinal(b.substring(0,(b.length()==i+1)?i+1:i),cont);
                        cont++;
                    break;
                    }
                    
                }

            }
               
                 for (int j = 0; j < b.length(); j++) {
                  
                     if(b.charAt(j)=='@'){
                     
                         for (int i = j; i < b.length(); i++) {
                    
                             if (b.charAt(i)==';' || b.charAt(i)==','||b.charAt(i)=='='
                                     || b.charAt(i)=='+'|| b.charAt(i)=='-'
                                     || b.charAt(i)=='*'|| b.charAt(i)=='/'||b.charAt(i)==')')
                        
                        
                             {
                        
                            textoCadena.InsertarAlfinal(b.substring(
                                   j, i),cont);
                            cont++;
                          break;
                    }else if(i+1==b.length()){
                     textoCadena.InsertarAlfinal(b.substring(
                               j, i+1),cont);
                     cont++;
                     break;
                    }
                    
                  }
                }
                 
                 
            }
            
           
            
                for (int i = 0; i < b.length(); i++) {
                     if(b.charAt(i)=='+'){
                      textoCadena.InsertarAlfinal(String.valueOf(b.charAt(i)),cont);
                    cont++;
                     }
                }
            
                for (int i = 0; i < b.length(); i++) {
                     if(b.charAt(i)=='='&&b.charAt(i+1)!='<'
                             &&b.charAt(i+1)!='>'){
                      textoCadena.InsertarAlfinal(String.valueOf(b.charAt(i)),cont);
                      cont++;
                    }
                }
                 for (int i = 0; i < b.length(); i++) {
                     if(b.charAt(i)=='-'){
                      textoCadena.InsertarAlfinal(String.valueOf(b.charAt(i)),cont);
                    cont++;
                     }
                }
                  for (int i = 0; i < b.length(); i++) {
                     if(b.charAt(i)=='/'){
                      textoCadena.InsertarAlfinal(String.valueOf(b.charAt(i)),cont);
                    cont++;
                     }
                }
                   for (int i = 0; i < b.length(); i++) {
                     if(b.charAt(i)=='*'){
                      textoCadena.InsertarAlfinal(String.valueOf(b.charAt(i)),cont);
                    cont++;
                     }
                }
                   for (int i = 0; i < b.length(); i++) {
                     if(b.charAt(i)=='('){
                      textoCadena.InsertarAlfinal(String.valueOf(b.charAt(i)),cont);
                    cont++;
                     }
                }
                for (int i = 0; i < b.length(); i++) {
                     if(b.charAt(i)==')'){
                      textoCadena.InsertarAlfinal(String.valueOf(b.charAt(i)),cont);
                    cont++;
                     }
                }
                for (int i = 0; i < b.length(); i++) {
                     if(b.charAt(i)=='{'){
                      textoCadena.InsertarAlfinal(String.valueOf(b.charAt(i)),cont);
                    cont++;
                     }
                }
                
                for (int i = 0; i < b.length(); i++) {
                     if(b.charAt(i)=='}'){
                      textoCadena.InsertarAlfinal(String.valueOf(b.charAt(i)),cont);
                   cont++; }
                }
                
                 
                 
                
                       try {
                         
                       if(b.charAt(0)=='<'){
                      textoCadena.InsertarAlfinal(String.valueOf(b.charAt(0)),cont);
                     cont++;
                    }
                       } catch (Exception e) {
                       }
                     
                 try {
                        if(b.charAt(0)=='=' && b.charAt(1)=='<'){
                     textoCadena.InsertarAlfinal(String.valueOf(b.substring(0,2)),cont);
                     cont++;
                    }
                       } catch (Exception e) {
                       }
                 try {
                        if(b.charAt(0)=='=' && b.charAt(1)=='>'){
                     textoCadena.InsertarAlfinal(String.valueOf(b.substring(0,2)),cont);
                     cont++;
                    }
                       } catch (Exception e) {
                       }
              
                       try {
                        if(b.charAt(0)=='<' && b.charAt(1)=='>'){
                     textoCadena.InsertarAlfinal(String.valueOf(b.substring(0,2)),cont);
                     cont++;
                    }
                       } catch (Exception e) {
                       }
                       
                       
                       try {
                        if(b.charAt(0)=='>'){
                       textoCadena.InsertarAlfinal(String.valueOf(b.charAt(0)),cont);
                       cont++;
                    }
                       } catch (Exception e) {
                       }
                    
                  try {
                        if(b.charAt(0)=='°' && b.charAt(1)=='>'){
                     textoCadena.InsertarAlfinal(String.valueOf(b.substring(0,2)),cont);
                     cont++;
                    }
                       } catch (Exception e) {
                       }
             
            
                  
                  
                  
                  
                  
                       
                         
                          for (int j = 0; j < b.length(); j++) {
                     if(b.charAt(j)==';'){
                     textoCadena.InsertarAlfinal(String.valueOf( b.charAt(j)),cont);
                     cont++;
                     break;
                    }
                  }
                             for (int j = 0; j < b.length(); j++) {
                     if(b.charAt(j)==','){
                     textoCadena.InsertarAlfinal(String.valueOf( b.charAt(j)),cont);
                     cont++;
                   
                    }
                  }
                
                                for (int j = 0; j < b.length(); j++) {
                             String Concadenador = b + " ",finalcadena = b;
                                 String terminarCadena=b;
                            if(b.charAt(j)=='\"'){
                                
                                for (int i = 1; i < terminarCadena.length(); i++) {
                                    if(terminarCadena.charAt(i)=='\"' || terminarCadena.charAt(i)==';'){
                                     textoCadena.InsertarAlfinal(String.valueOf(finalcadena.substring(0, finalcadena.length()-1)),cont);
                                     
                                     
                                         cont++;
                                         j=i;
                                         break;
                                    } else if(terminarCadena.length()==i+1){
                                             terminarCadena= (String) token.nextToken();
                                              finalcadena= Concadenador + terminarCadena;
                                              
                                                      
                          for (int k = 0; k < terminarCadena.length(); k++) {
                                if(terminarCadena.charAt(k)==';'){
                               textoCadena.InsertarAlfinal(String.valueOf( terminarCadena.charAt(k)),cont);
                                  cont++;
                                  break;
                                  }
                                 }
                          
                                              i=0;
                                    }
                                    
                                }
                                
                                    
                            }
                         }
                            }
        
                         
                            
                     
            
            
            
           
//    
        
        
//        
          DefaultTableModel tablaTemp = (DefaultTableModel) tablajp.getModel();
     
    int a2=textoCadena.ObtenerTamaño();
        System.out.println(a2);
        System.out.println(cont);
        int aparecions=0,t = 0;
        int j;
       String aparecion[]=new String[a2],concadenador="",concadenadorEx="";
  
        for (int i = 0; i < a2; i++) {
          String valorC = textoCadena.BuscarValor(i);
                       if(!m.obtenerDato(valorC).equals("Error")){
                       aparecion[i]=valorC;
                       }
        }
            for (int i = 0; i < a2; i++) {
                  String valorC = textoCadena.BuscarValor(i);
  
                       if(!m.obtenerDato(valorC).equals("Error")){
                           System.out.println(valorC);
                           System.out.println(m.obtenerDatoToken(valorC));
                         
                            if(tablaTemp.getRowCount()==0){
                                     Object datosRenglon[]={valorC,m.obtenerDatoToken(valorC),m.obtenerDatoTokenAlias(valorC),1};
                                     this.repaint();
                                     tablaTemp.addRow(datosRenglon);
                                     
                           }else{
                           
                               for (j = 0; j < tablaTemp.getRowCount(); j++) {
                                   if(valorC.equals(String.valueOf(tablajp.getValueAt(j, 0)))){
                                   aparecions++;
                
                                   for (int k = 0; k < a2; k++) {
                                           String contador = aparecion[k];
                                           if(valorC.equals(contador)){
                                           t++;
                                          
                                           
                                           }
                                       }
                                   tablajp.setValueAt(concadenador, j, 3);
                                   t=0;
                                   concadenador="";
                                     
                                   }
                                   
                               }
                                if(aparecions==0){
                                
                                   Object datosRenglon[]={valorC,m.obtenerDatoToken(valorC),m.obtenerDatoTokenAlias(valorC),1};
                                   concadenadorEx=concadenadorEx+m.obtenerDatoTokenAlias(valorC);  
                                   tablaTemp.addRow(datosRenglon);
                                   this.repaint();
                                     aparecions=0;
                                }else{
                                   
                                  
                                aparecions=0;
                                }
                                 
                                    
                                }
                           }else{
                            JOptionPane.showMessageDialog(null, "Error en:"+valorC);
                               a =  String.valueOf(a.replace(valorC, "Error"));
                       }
            }
        for (int i = 0; i <tablajp.getRowCount(); i++){
         a =  String.valueOf(a.replace("%", ""));
         String b=String.valueOf(tablajp.getValueAt(i, 0));
         b=b.replace(" ","");
          a=String.valueOf(a.replace(b,String.valueOf(tablajp.getValueAt(i, 2))));
         
        }
        lblcadena.setText(a);
                       
            
            
            
      

    
        
        
        
    }//GEN-LAST:event_jbAnalizarActionPerformed

   
 public void borraT(JTable tbl){
DefaultTableModel tam=(DefaultTableModel)tbl.getModel();
    for (int i = tam.getRowCount()-1; i >=0; i--) {
        tam.removeRow(i);
        tam.removeTableModelListener(tbl);
    }
}
    
 


    private void MI_GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_GuardarActionPerformed
      FileNameExtensionFilter filtro = new FileNameExtensionFilter("LION (.LN)", "LN");
        try {
//System.getProperty("user.dir") Abre el JFileChooser donde esta el ejecutable
            JFileChooser fc = new JFileChooser();
            fc.setFileFilter(filtro);
            fc.showSaveDialog(this); //Muestra el diálogo
            File Guardar = fc.getSelectedFile();

            try {
                if (Guardar.exists()) {

                    try {

                        FileWriter w = new FileWriter(Guardar);
                        BufferedWriter bw = new BufferedWriter(w);
                        PrintWriter wr = new PrintWriter(bw);
                        String[] als = T_texto.getText().split("\n");

                        for (int a = 0; a < als.length; a++) {
                            wr.write(als[a]);
                            wr.println();
                        }

                        wr.close();
                        bw.close();

                    } catch (IOException ex) {

                    }

                } else {

                    if (Guardar.mkdir()) {

                        String ruba_nueva = Guardar.getPath() + "\\";
                        FileWriter w = new FileWriter(ruba_nueva + Guardar.getName() + ".LN");
                        BufferedWriter bw = new BufferedWriter(w);
                        PrintWriter wr = new PrintWriter(bw);
                        String[] als = T_texto.getText().split("\n");

                        for (int a = 0; a < als.length; a++) {
                            wr.write(als[a]);
                            wr.println();
                        }

                        wr.close();
                        bw.close();
                    } else {

                    }
                }

            } catch (IOException ioe) {
                System.out.println(ioe); //Muestra por consola los errores
            }

        } catch (NullPointerException e) {

        }
        
    }//GEN-LAST:event_MI_GuardarActionPerformed

    private void jbBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarActionPerformed
T_texto.setText(null);        // TODO add your handling code here:
textoCadena.eliminarTodo();
       
        cont=0;
        cont2=0;
       m.inicializar();
          
        borraT(tablajp);
       
    }//GEN-LAST:event_jbBorrarActionPerformed
        
    
   

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pantalla_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pantalla_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pantalla_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pantalla_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pantalla_Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MI_Abrir;
    private javax.swing.JMenuItem MI_Guardar;
    private javax.swing.JMenuItem MI_Salir;
    private javax.swing.JMenu M_Archivo;
    public static javax.swing.JTextArea T_texto;
    private javax.swing.JLabel columna;
    private javax.swing.JLabel fila;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jbAnalizar;
    private javax.swing.JButton jbBorrar;
    private javax.swing.JLabel lblcadena;
    private javax.swing.JTable tablajp;
    // End of variables declaration//GEN-END:variables

    void contadorPalabras(int i) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
